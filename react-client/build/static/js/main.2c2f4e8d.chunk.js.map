{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendWord","word","meaning","lexicalCategory","axios","post","then","data","i","results","length","push","lexicalEntries","j","s","setState","catch","err","alert","window","location","reload","onChange","e","defineProperty","target","name","value","state","theWord","_this2","react_default","a","createElement","className","index_es","id","label","margin","variant","fullWidth","color","onClick","map","mean","console","log","entries","senses","v","undefined","definitions","short_definitions","ex","examples","x","text","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TA8GeA,cAxGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,SAAW,SAACC,GACV,IAAIC,EAAU,GACVC,EAAkB,GACtBC,IAAMC,KAAK,WAAY,CAAEJ,KAAMA,IAC5BK,KAAK,SAACC,GACL,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKA,KAAKE,QAAQC,OAAQF,IAC5CN,EAAQS,KAAKJ,EAAKA,KAAKE,QAAQD,GAAGI,gBAEpC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAQQ,OAAQG,IAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAAQW,GAAGH,OAAQI,IACrCX,EAAgBQ,KAAKT,EAAQW,GAAGC,IAGpCrB,EAAKsB,SAAS,CAAER,KAAMJ,MAEvBa,MAAM,SAACC,GACNC,MAAM,2BACNC,OAAOC,SAASC,YAzBH5B,EA6BnB6B,SAAW,SAACC,GACV9B,EAAKsB,SAALrB,OAAA8B,EAAA,EAAA9B,CAAA,GACG6B,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SA5B5BlC,EAAKmC,MAAQ,CACXC,QAAS,GACTtB,KAAM,IALSd,wEAkCV,IAAAqC,EAAAlC,KACP,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,GAAG,UACHC,MAAM,OACNX,KAAK,UACLJ,SAAU1B,KAAK0B,SACfgB,OAAO,SACPC,QAAQ,WACRC,WAAS,EACTN,UAAU,SAEZH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEI,QAAQ,YACRE,MAAM,UACNC,QAAS,kBAAMZ,EAAK9B,SAAS8B,EAAKF,MAAMC,WAH1C,aAMAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZtC,KAAKgC,MAAMrB,KAAKoC,IAAI,SAAAC,GAEnB,OADAC,QAAQC,IAAIF,GAEVb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBAAeW,EAAKzC,iBAEnByC,EAAKG,QAAQJ,IAAI,SAAA7B,GAChB,OACEiB,EAAAC,EAAAC,cAAA,WACGnB,EAAEkC,OAAOL,IAAI,SAAAM,GAEZ,QAAsBC,IAAlBD,EAAEE,YACJ,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BAAkBgB,EAAEG,kBAAkB,OAK7CtC,EAAEkC,OAAOL,IAAI,SAAAU,GACZ,QAAoBH,IAAhBG,EAAGC,SACL,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAGC,SAAS5C,OAAQ6C,IACtC,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBAAeoB,EAAGC,SAASC,GAAGC,0BAnFhDC,aCOEC,QACW,cAA7BvC,OAAOC,SAASuC,UAEe,UAA7BxC,OAAOC,SAASuC,UAEhBxC,OAAOC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.2c2f4e8d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Button, TextField } from '@material-ui/core';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      theWord: '',\n      data: [],\n    }\n  }\n  sendWord = (word) => {\n    var meaning = []\n    var lexicalCategory = []\n    axios.post('/defWord', { word: word })\n      .then((data) => {\n        for (var i = 0; i < data.data.results.length; i++) {\n          meaning.push(data.data.results[i].lexicalEntries);\n        }\n        for (var j = 0; j < meaning.length; j++) {\n          for (var s = 0; s < meaning[j].length; s++) {\n            lexicalCategory.push(meaning[j][s])\n          }\n        }\n        this.setState({ data: lexicalCategory })\n      })\n      .catch((err) => {\n        alert(\"there's no such a thing\");\n        window.location.reload();\n      })\n  }\n\n  onChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  };\n  render() {\n    return (\n      <div className=\"bod\">\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h2>Dictionary</h2>\n            <TextField\n              id=\"theWord\"\n              label=\"Word\"\n              name='theWord'\n              onChange={this.onChange}\n              margin=\"normal\"\n              variant=\"outlined\"\n              fullWidth\n              className=\"text\"\n            />\n            <br />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => this.sendWord(this.state.theWord)}\n            >Defintion\n          </Button>\n            <div className=\"Word\">\n              {this.state.data.map(mean => {\n                console.log(mean)\n                return (\n                  <div>\n                    <h3>Category: {mean.lexicalCategory}\n                    </h3>\n                    {mean.entries.map(s => {\n                      return (\n                        <div>\n                          {s.senses.map(v => {\n\n                            if (v.definitions !== undefined) {\n                              return (\n                                <div>\n                                  <h4>definition : {v.short_definitions[0]}</h4>\n                                </div>\n                              )\n                            }\n                          })}\n                          {s.senses.map(ex => {\n                            if (ex.examples !== undefined) {\n                              for (var x = 0; x < ex.examples.length; x++) {\n                                return (\n                                  <div>\n                                    <h4>example : {ex.examples[x].text}</h4>\n                                  </div>\n                                )\n                              }\n                            }\n                          })}\n                        </div>\n                      )\n                    })\n                    }\n                  </div>\n                )\n              })\n              }\n            </div>\n          </header>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}